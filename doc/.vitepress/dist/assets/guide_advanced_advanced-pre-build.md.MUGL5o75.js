import{_ as s,c as i,o as e,a4 as a}from"./chunks/framework.CC18aqI2.js";const E=JSON.parse('{"title":"预构建","description":"","frontmatter":{},"headers":[],"relativePath":"guide/advanced/advanced-pre-build.md","filePath":"guide/advanced/advanced-pre-build.md","lastUpdated":1719991187000}'),n={name:"guide/advanced/advanced-pre-build.md"},t=a(`<h1 id="预构建" tabindex="-1">预构建 <a class="header-anchor" href="#预构建" aria-label="Permalink to &quot;预构建&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>Admin 内置预构建功能，在第一次构建的时候进行缓存，从而加快在下一次构建的时间。</p><p>预构建的依赖需要进行配置，Admin 默认只将布局用到的依赖进行缓存，所以开发者自行配置自己的依赖缓存。</p><p>在 <code>build/optimize.ts</code> 文件里，<code>include</code> 数组里添加预构建模块，<code>exclude</code> 数组排除与构建模块。</p><h2 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h2><p><code>include</code> 配置为需要预构建的模块。<code>vite</code> 启动时会将 <code>include</code> 里的模块，编译成 <code>esm</code> 格式并缓存到 <code>node_modules/.vite</code> 文件夹，页面加载到对应模块时如果浏览器有缓存就读取浏览器缓存，如果没有会读取本地缓存并按需加载。</p><p>下面是精简版 <code>include</code> 配置，将 <code>package.json</code> 的 <code>dependencies</code> 大部分未全局安装的模块都配置进来，当然如果模块里面的东西很少，也就是里面方法不多，可以不用配置进来直接让浏览器加载即可（您自己安装的模块也是参考该配置）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> include</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;qs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;mitt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;pinia&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;vue-i18n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;sortablejs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;@vueuse/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;path-to-regexp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;pinia-plugin-persistedstate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>提示</p><ol><li>尤其当您禁用浏览器缓存时（这种情况只应该发生在调试阶段）必须将对应模块加入到 <code>include</code> 里，否则会遇到开发环境切换页面卡顿的问题（<code>vite</code> 会认为它是一个新的依赖包会重新加载并强制刷新页面），因为它既无法使用浏览器缓存，又没有在本地 <code>node_modules/.vite</code> 里缓存</li><li>如果您使用的第三方库是全局引入，也就是引入到 <code>src/main.ts</code> 文件里，就不需要再添加到 <code>include</code> 里了，因为 <code>vite</code> 会自动将它们缓存到 <code>node_modules/.vite</code></li></ol></div><h2 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h2><p><code>exclude </code> 配置为排除预构建的模块。</p>`,12),d=[t];function l(p,c,o,h,k,r){return e(),i("div",null,d)}const g=s(n,[["render",l]]);export{E as __pageData,g as default};
